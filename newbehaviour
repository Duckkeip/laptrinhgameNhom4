//thêm ani của slide tường
using UnityEngine;

public class Behaviour : MonoBehaviour
{
    private Rigidbody2D body;
    private SpriteRenderer spr;
    private Animator ani;
    private BoxCollider2D boxcoll;

    [SerializeField] private Transform wallCheck;

    private float horizontalInput;
    private float currentSpeed;

    private bool isFacingRight = true;
    private bool isWallSliding;
    private bool isWallJumping;
    private float wallJumpingCounter;
    private float wallJumpingDirection;

    [SerializeField] private float speed = 3f;
    [SerializeField] private float sprintSpeed = 5.5f;
    [SerializeField] private float jumpSpeed = 5f;

    [SerializeField] private float wallSlidingSpeed = 4f;
    [SerializeField] private float wallJumpingTime = 2f;// thoi gian co the nhay lan nua khi cham tuong
    [SerializeField] private float wallJumpingDuration = 0.2f;
    [SerializeField] public Vector2 wallJumpingPower = new Vector2(5f, 4f);

    [SerializeField] private LayerMask groundLayer;
    [SerializeField] private LayerMask wallLayer;

    private void Awake()
    {
        body = GetComponent<Rigidbody2D>();
        spr = GetComponent<SpriteRenderer>();
        ani = GetComponent<Animator>();
        boxcoll = GetComponent<BoxCollider2D>();
    }

    private void Update()
    {
        horizontalInput = Input.GetAxis("Horizontal");

        bool isSprinting = Input.GetKey(KeyCode.LeftShift);
        currentSpeed = isSprinting ? sprintSpeed : speed;

        
        // Flip sprite
        



        ani.SetBool("Run", horizontalInput != 0);
        ani.SetBool("Jump", !isGrounded());
        ani.SetBool("Sprint", isSprinting && horizontalInput != 0);

        if (Input.GetKeyDown(KeyCode.Space))
        {
            Jump();
        }

        WallSlide();
        WallJump();

        if (isWallJumping)
        {
            Flip();
        }
    }

    private void FixedUpdate()
    {
        body.linearVelocity = new Vector2(horizontalInput * currentSpeed, body.linearVelocity.y);
    }
    
    private void Jump()
    {
        if (isGrounded())
        {
            body.linearVelocity = new Vector2(body.linearVelocity.x, jumpSpeed);
            ani.SetTrigger("Jumpa");
        }
        else if (onWall() && !isGrounded())
        {
            float wallDirection = horizontalInput > 0 ? 1 : -1;
            body.linearVelocity = new Vector2(-wallDirection * wallJumpingPower.x, wallJumpingPower.y);
            ani.SetTrigger("Jumpa");
        }
    }

    private void WallSlide()
    {
        if (onWall() && !isGrounded() && horizontalInput != 0f)
        {
            isWallSliding = true;
            body.linearVelocity = new Vector2(body.linearVelocity.x, Mathf.Clamp(body.linearVelocity.y, -wallSlidingSpeed, float.MaxValue));
        }
        else
        {
            isWallSliding = false;
        }
    }

    private void WallJump()
    {
        if (isWallSliding)
        {
            isWallJumping = false;
            wallJumpingDirection = -transform.localScale.x;
            wallJumpingCounter = wallJumpingTime;
            CancelInvoke(nameof(StopWallJumping));
        }
        else
        {
            wallJumpingCounter -= Time.deltaTime;
        }

        if (Input.GetKeyDown(KeyCode.Space) && wallJumpingCounter > 0f)
        {
            isFacingRight = !isFacingRight;
            isWallJumping = true;
            body.linearVelocity = new Vector2(wallJumpingDirection * wallJumpingPower.x, wallJumpingPower.y);
            wallJumpingCounter = 0f;

            if ((wallJumpingDirection < 0 && !spr.flipX) || (wallJumpingDirection > 0 && spr.flipX))
                {
                    spr.flipX = wallJumpingDirection < 0;
                }

            Invoke(nameof(StopWallJumping), wallJumpingDuration);
        }
    }

    private void StopWallJumping()
    {
        isWallJumping = false;
    }

    private bool isGrounded()
    {
        RaycastHit2D raycastHit = Physics2D.BoxCast(
            boxcoll.bounds.center,
            boxcoll.bounds.size,
            0f,
            Vector2.down,
            0.1f,
            groundLayer
        );
        return raycastHit.collider != null;
    }

    private bool onWall()
    {
        RaycastHit2D raycastHit = Physics2D.BoxCast(
            boxcoll.bounds.center,
            boxcoll.bounds.size,
            0f,
            new Vector2(transform.localScale.x, 0),
            0.1f,
            wallLayer
        );
        return raycastHit.collider != null;
    }

     private void Flip()
    {
        if (isFacingRight && horizontalInput < 0f || !isFacingRight && horizontalInput > 0f)
        {
            isFacingRight = !isFacingRight;
            Vector3 localScale = transform.localScale;
            localScale.x *= -1f;
            transform.localScale = localScale;
        }
    }

}
